# -*- coding: utf-8 -*- # Garante codifica√ß√£o correta

import streamlit as st
import requests
import pandas as pd
from itertools import combinations
from collections import OrderedDict
from datetime import date, timedelta
import locale # Para nomes de meses em portugu√™s
import re # Para parsear nomes combinados

# --- Configura√ß√£o da P√°gina (MOVIDO PARA C√Å - DEVE SER O PRIMEIRO COMANDO st.*) ---
st.set_page_config(layout="wide", page_title="Painel de Infla√ß√£o BCB | LocX", initial_sidebar_state="expanded")
# -----------------------------------------------------------------------------------

# --- DEFINIR LOCALE PARA PORTUGU√äS ---
try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except locale.Error:
    try:
        locale.setlocale(locale.LC_TIME, 'Portuguese_Brazil.1252')
    except locale.Error:
        try:
            locale.setlocale(locale.LC_TIME, 'ptb')
        except locale.Error:
            # ATEN√á√ÉO: Usando print() aqui para evitar erro de ordem do Streamlit.
            # Esta mensagem aparecer√° nos logs do Streamlit Cloud se o locale falhar.
            print("Warning: N√£o foi poss√≠vel definir o locale para Portugu√™s (pt_BR).")
# ------------------------------------


# --- Cabe√ßalho com Logo ---
# Comentado pois precisa do arquivo de imagem no reposit√≥rio
# col_espaco, col_logo = st.columns([0.85, 0.15])
# with col_logo:
#    try:
#        st.image("locx logo.png", width=120) # Certifique-se que 'locx logo.png' est√° no repo
#    except Exception as e:
#        st.error(f"Erro ao carregar logo: {e}")

# --- T√≠tulo ---
st.title("üìä Painel de √çndices de Infla√ß√£o (BCB SGS)")
st.markdown("Consulte e compare a infla√ß√£o acumulada.")

# --- Configura√ß√£o √çndices ---
INDICES_IDS = OrderedDict([
    ('IPCA', 433),
    ('INPC', 188),
    ('IGP-DI', 190),
    ('INCC', 192),
    ('IGP-M', 189),
    ('IPC-FIPE', 191)
])

# --- Busca Dados BCB (Cache) ---
@st.cache_data(ttl=3600) # Cache por 1 hora
def get_bcb_data(codigo_sgs, period=None, start_date=None, end_date=None):
    """Busca dados da API SGS do BCB."""
    if period:
        url = f"https://api.bcb.gov.br/dados/serie/bcdata.sgs.{codigo_sgs}/dados/ultimos/{period}?formato=json"
    elif start_date and end_date:
        start_str = start_date.strftime('%d/%m/%Y')
        end_str = end_date.strftime('%d/%m/%Y')
        url = f"https://api.bcb.gov.br/dados/serie/bcdata.sgs.{codigo_sgs}/dados?formato=json&dataInicial={start_str}&dataFinal={end_str}"
    else:
        print(f"Erro BCB ({codigo_sgs}): Nem 'period' nem 'start/end_date' fornecidos.")
        return None # Precisa de um per√≠odo ou datas

    try:
        response = requests.get(url, timeout=20) # Aumentado timeout
        response.raise_for_status() # Verifica erros HTTP (4xx, 5xx)
        data = response.json()

        if not data: # Lista vazia retornada pela API
            print(f"BCB ({codigo_sgs}): Nenhum dado retornado pela API para o per√≠odo/datas.")
            return None

        df = pd.DataFrame(data)
        df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y')
        df = df.set_index('data')
        col_name = f'sgs_{codigo_sgs}'
        df = df.rename(columns={'valor': col_name})
        df[col_name] = pd.to_numeric(df[col_name], errors='coerce')
        df = df.dropna(subset=[col_name]) # Remove linhas onde a convers√£o falhou

        if df.empty:
             print(f"BCB ({codigo_sgs}): DataFrame vazio ap√≥s limpeza inicial.")
             return None

        # Filtra novamente pelas datas exatas se fornecidas (API pode retornar um pouco mais)
        if start_date and end_date:
            df.index = pd.to_datetime(df.index)
            df = df[(df.index >= pd.to_datetime(start_date)) & (df.index <= pd.to_datetime(end_date))]
            # Garante √≠ndice √∫nico (em caso de dados duplicados raros na API)
            df = df[~df.index.duplicated(keep='first')]

        if df.empty:
             print(f"BCB ({codigo_sgs}): DataFrame vazio ap√≥s filtro final de datas.")
             return None

        return df[[col_name]] # Retorna apenas a coluna de valor

    except requests.exceptions.Timeout:
        st.error(f"Erro BCB ({codigo_sgs}): Timeout ao acessar API.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"Erro BCB ({codigo_sgs}): Erro na requisi√ß√£o - {e}")
        return None
    except Exception as e:
        st.error(f"Erro processando dados BCB ({codigo_sgs}): {e}")
        return None

# --- C√°lculo Acumulado (Compara√ß√£o) ---
def calculate_accumulated_inflation(df, column_name):
    """Calcula infla√ß√£o acumulada para uma coluna em um DataFrame."""
    if column_name not in df.columns:
        print(f"Erro Acumulado: Coluna '{column_name}' n√£o encontrada.")
        return None
    try:
        # Converte para num√©rico, tratando erros e removendo NaNs resultantes
        numeric_series = pd.to_numeric(df[column_name], errors='coerce').dropna()

        if numeric_series.empty:
            print(f"Erro Acumulado ({column_name}): S√©rie vazia ap√≥s convers√£o/limpeza.")
            return None
        if len(numeric_series) < 1: # Precisa de pelo menos um valor
             print(f"Erro Acumulado ({column_name}): Menos de 1 valor v√°lido.")
             return None
        # Verifica se todos os valores s√£o realmente num√©ricos e finitos
        if not pd.api.types.is_numeric_dtype(numeric_series) or not all(numeric_series.apply(lambda x: pd.notna(x) and abs(x) != float('inf'))):
             print(f"Erro Acumulado ({column_name}): Cont√©m valores n√£o num√©ricos ou infinitos.")
             return None

        # C√°lculo da infla√ß√£o acumulada
        accumulated_inflation = (numeric_series.apply(lambda x: 1 + (x / 100)).prod() - 1) * 100
        return accumulated_inflation
    except Exception as e:
        print(f"Erro inesperado em calculate_accumulated_inflation ({column_name}): {e}")
        return None

# --- C√°lculo Acumulado 12M (Hist√≥rico/Aluguel) ---
def calculate_rolling_12m_accumulation(series_window_monthly_perc):
    """Fun√ß√£o para ser usada com .rolling().apply() para calcular acum. 12 meses."""
    valid_series = series_window_monthly_perc.dropna()
    if len(valid_series) == 12: # S√≥ calcula se tiver exatamente 12 meses v√°lidos na janela
        try:
            accumulation = (valid_series.apply(lambda x: 1 + (x / 100)).prod() - 1) * 100
            return accumulation
        except Exception:
            return pd.NA # Retorna NA em caso de erro no c√°lculo
    else:
        return pd.NA # Retorna NA se n√£o tiver 12 meses v√°lidos

# --- Controles Barra Lateral ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes da Compara√ß√£o")
period_mode = st.sidebar.radio(
    "Definir per√≠odo da compara√ß√£o por:",
    ("√öltimos N Meses", "Intervalo de Datas"),
    index=0,
    key="period_mode_radio"
)

period = None
start_date = None
end_date = None
period_label = ""

if period_mode == "√öltimos N Meses":
    period = st.sidebar.number_input(
        "N√∫mero de meses:",
        min_value=1, max_value=360, value=12, step=1,
        help="N√∫mero aproximado de meses anteriores para buscar.",
        key="period_number_input"
    )
    period_label = f"{period} √∫ltimos meses (aprox.)"
else: # Intervalo de Datas
    today = date.today()
    default_start = today - timedelta(days=366) # Default: √∫ltimo ano
    start_date = st.sidebar.date_input(
        "Data Inicial:",
        value=default_start,
        min_value=date(1990, 1, 1), # Limite razo√°vel para in√≠cio das s√©ries
        max_value=today,
        key="start_date_input"
    )
    end_date = st.sidebar.date_input(
        "Data Final:",
        value=today,
        min_value=start_date, # Data final n√£o pode ser antes da inicial
        max_value=today,
        key="end_date_input"
    )
    # Valida√ß√£o adicional
    if start_date and end_date and start_date > end_date:
        st.sidebar.error("Erro: Data Final n√£o pode ser anterior √† Data Inicial.")
        st.stop() # Interrompe execu√ß√£o se datas inv√°lidas

# Atualiza label se modo de data foi escolhido
if not period_label and start_date and end_date:
    period_label = f"de {start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')}"

default_indices = list(INDICES_IDS.keys())
selected_indices_names = st.sidebar.multiselect(
    "Selecione os √çndices para Comparar:",
    options=default_indices,
    default=default_indices[:3], # Default: os 3 primeiros da lista
    help="Escolha um ou mais √≠ndices para a an√°lise acumulada.",
    key="indices_multiselect"
)

# --- L√≥gica Principal da Compara√ß√£o Acumulada ---
st.header(f"üìà Compara√ß√£o Acumulada ({period_label})")

if not selected_indices_names:
    st.warning("üëà Selecione pelo menos um √≠ndice na barra lateral para iniciar a compara√ß√£o.")
    st.stop()

dataframes = {}
indices_validos_busca = [] # Guarda nomes dos √≠ndices que retornaram dados

# Busca dados para cada √≠ndice selecionado
# Usar st.spinner para feedback visual durante a busca
with st.spinner(f"Buscando dados para compara√ß√£o ({len(selected_indices_names)} √≠ndice(s), {period_label})..."):
    for indice_name in selected_indices_names:
        if indice_name in INDICES_IDS:
            codigo_sgs = INDICES_IDS[indice_name]
            # Passa os par√¢metros corretos (period OU start/end_date)
            df = get_bcb_data(codigo_sgs, period=period, start_date=start_date, end_date=end_date)

            if df is not None and not df.empty:
                # Renomeia a coluna para o nome do √≠ndice (IPCA, INPC, etc.)
                col_name_sgs = f'sgs_{codigo_sgs}'
                df = df.rename(columns={col_name_sgs: indice_name})
                dataframes[indice_name] = df # Guarda o DataFrame no dicion√°rio
                indices_validos_busca.append(indice_name)
            else:
                 print(f"Compara√ß√£o: Nenhum dado v√°lido retornado para {indice_name}.")
        else:
            st.warning(f"√çndice '{indice_name}' n√£o reconhecido.") # Caso raro

# Verifica se algum dado foi obtido
if not indices_validos_busca:
    st.error("Nenhum dado p√¥de ser obtido para os √≠ndices selecionados no per√≠odo especificado.")
    st.stop()

# Combina os DataFrames obtidos
indices_df_comp = None
if dataframes:
    try:
        # Usa concat com outer join para manter todas as datas e preencher com NaN onde n√£o h√° dados
        indices_df_comp = pd.concat(dataframes.values(), axis=1, join='outer')
        # Ordena pelo √≠ndice (data)
        indices_df_comp = indices_df_comp.sort_index()
    except Exception as e:
        st.error(f"Erro ao combinar DataFrames para compara√ß√£o: {e}")
        st.stop()

# Se a combina√ß√£o falhar ou resultar em vazio
if indices_df_comp is None or indices_df_comp.empty:
    st.error("Falha ao criar ou DataFrame combinado vazio para compara√ß√£o.")
    st.stop()

# Refiltra por datas se o modo de intervalo foi usado (garante limites exatos)
if start_date and end_date:
    indices_df_comp.index = pd.to_datetime(indices_df_comp.index) # Garante que √© DatetimeIndex
    indices_df_comp = indices_df_comp[(indices_df_comp.index >= pd.to_datetime(start_date)) & (indices_df_comp.index <= pd.to_datetime(end_date))]

# Remove linhas que s√≥ contenham NaN (ap√≥s o join e poss√≠vel refiltro)
indices_df_comp.dropna(axis=0, how='all', subset=indices_validos_busca, inplace=True)

# Verifica se ainda h√° dados ap√≥s a limpeza
if indices_df_comp.empty:
    st.warning(f"Nenhum dado comum encontrado para os √≠ndices no per√≠odo {period_label} ap√≥s combina√ß√£o e limpeza.")
    st.stop()

# Calcula e exibe a infla√ß√£o acumulada para cada √≠ndice v√°lido
accumulated_inflation_comp = {}
final_valid_indices_comp = [] # √çndices que tiveram acumulado calculado com sucesso

# Exibe o per√≠odo efetivo que est√° sendo comparado (pode ser menor que o solicitado)
if not indices_df_comp.empty:
    actual_start_comp = indices_df_comp.index.min().strftime('%d/%m/%Y')
    actual_end_comp = indices_df_comp.index.max().strftime('%d/%m/%Y')
    st.markdown(f"*Per√≠odo efetivo considerado na compara√ß√£o: **{actual_start_comp} a {actual_end_comp}***")

# Cria colunas para exibir as m√©tricas lado a lado
num_indices_plot = len(indices_validos_busca)
cols_metrics = st.columns(num_indices_plot) if num_indices_plot > 0 else [st] # Fallback se 0
idx_col = 0

for indice_name in indices_validos_busca: # Itera sobre os que retornaram dados
     if indice_name in indices_df_comp.columns:
         # Passa apenas o DataFrame com a coluna relevante
         inflation = calculate_accumulated_inflation(indices_df_comp[[indice_name]], indice_name)
         if inflation is not None:
             accumulated_inflation_comp[indice_name] = inflation # Guarda o resultado
             # Seleciona a coluna para exibir a m√©trica
             current_col = cols_metrics[idx_col % num_indices_plot] if num_indices_plot > 0 else st
             with current_col:
                 st.metric(label=f"{indice_name} (Acum.)", value=f"{inflation:.2f}%")
             final_valid_indices_comp.append(indice_name) # Adiciona √† lista final
             idx_col += 1
         else:
              print(f"Compara√ß√£o: N√£o foi poss√≠vel calcular acumulado para {indice_name}.")

# Se nenhum acumulado p√¥de ser calculado
if not final_valid_indices_comp:
    st.error("N√£o foi poss√≠vel calcular a infla√ß√£o acumulada para nenhum dos √≠ndices selecionados neste per√≠odo.")
    st.stop()

# Expander para mostrar os dados brutos mensais usados na compara√ß√£o
with st.expander("Ver dados mensais brutos (%) usados na Compara√ß√£o Acumulada"):
    st.dataframe(indices_df_comp[indices_validos_busca].style.format("{:.2f}", na_rep="-"))

# An√°lise Combinada (M√©dias e M√≠nimos) - Somente se houver 2 ou mais √≠ndices com resultado
if len(final_valid_indices_comp) >= 2:
    st.subheader("An√°lise Combinada da Compara√ß√£o")
    mean_results_list = []
    min_results_list = []

    # Gera combina√ß√µes de 2 at√© N √≠ndices
    for r in range(2, len(final_valid_indices_comp) + 1):
        for combination in combinations(final_valid_indices_comp, r):
            indices_list = list(combination)
            indices_str = ", ".join(indices_list) # Para exibi√ß√£o

            # C√°lculo da M√©dia
            try:
                # Garante que todos os √≠ndices da combina√ß√£o t√™m um valor calculado
                if all(indice in accumulated_inflation_comp for indice in indices_list):
                    mean_inflation = sum(accumulated_inflation_comp[indice] for indice in indices_list) / len(indices_list)
                    mean_results_list.append(f"M√©dia acumulada para ({indices_str}): **{mean_inflation:.2f}%**")
                else:
                    mean_results_list.append(f"M√©dia acumulada para ({indices_str}): Erro (Dados ausentes para um ou mais √≠ndices)")
            except Exception as e:
                mean_results_list.append(f"M√©dia acumulada para ({indices_str}): Erro ({type(e).__name__})")

            # C√°lculo do M√≠nimo
            try:
                 # Filtra apenas os valores v√°lidos (n√£o None) para a combina√ß√£o atual
                 valid_values = {k: v for k, v in accumulated_inflation_comp.items() if k in indices_list and v is not None}
                 if not valid_values: # Se n√£o houver valores v√°lidos
                     min_results_list.append(f"Menor acumulada entre ({indices_str}): N/A (nenhum valor v√°lido)")
                     continue
                 # Encontra o menor valor e o nome do √≠ndice correspondente
                 min_inflation_val = min(valid_values.values())
                 min_index_name = min(valid_values, key=valid_values.get) # Encontra a chave (nome) com o menor valor
                 min_results_list.append(f"Menor acumulada entre ({indices_str}): **{min_inflation_val:.2f}%** ({min_index_name})")
            except Exception as e:
                 min_results_list.append(f"Menor acumulada entre ({indices_str}): Erro ({type(e).__name__})")

    # Exibe os resultados das m√©dias e m√≠nimos
    st.markdown("--- **M√©dias entre √çndices** ---")
    st.markdown("\n".join(mean_results_list)) # Usa markdown para negrito
    st.markdown("--- **Menor √çndice em Compara√ß√£o** ---")
    st.markdown("\n".join(min_results_list))

# --- Se√ß√£o do Gr√°fico Hist√≥rico COMPARATIVO (Acumulado 12 Meses) ---
st.divider()
st.header("üìú Hist√≥rico Comparativo de √çndices")
st.markdown("Visualize e compare a infla√ß√£o **acumulada em 12 meses** para m√∫ltiplos √≠ndices ao longo do tempo.")

historical_indices_options = list(INDICES_IDS.keys())
selected_historical_indices = st.multiselect(
    "Escolha o(s) √≠ndice(s) para ver o hist√≥rico:",
    options=historical_indices_options,
    default=historical_indices_options[:1], # Default: apenas o primeiro √≠ndice
    key="hist_indices_multiselect"
)

if selected_historical_indices:
    # Op√ß√µes de per√≠odo para o gr√°fico hist√≥rico
    historical_range_options = {
        "√öltimos 3 Meses": 3, "√öltimos 6 Meses": 6, "√öltimo Ano": 12,
        "√öltimos 3 Anos": 36, "√öltimos 5 Anos": 60, #"Tudo (desde 1995 aprox.)": 350
    }
    selected_range_label = st.radio(
        "Selecione o per√≠odo para visualizar o gr√°fico:",
        options=list(historical_range_options.keys()),
        horizontal=True,
        index=2, # Default: √öltimo Ano
        key="hist_range_radio"
    )
    months_in_range = historical_range_options[selected_range_label]

    # Determina a data inicial para buscar dados (precisa de 11 meses extras para o c√°lculo rolling)
    MONTHS_TO_FETCH_FOR_ROLLING = months_in_range + 11 # Busca dados suficientes para a janela m√≥vel
    today_hist = date.today()
    # Define uma data inicial segura para a busca (evita buscar d√©cadas desnecessariamente)
    # Usa uma data fixa m√≠nima se o per√≠odo for muito longo ou "Tudo"
    min_hist_date = date(1994, 7, 1) # Pouco antes do Plano Real
    start_date_fetch = max(today_hist - timedelta(days=MONTHS_TO_FETCH_FOR_ROLLING * 31), min_hist_date) # Pega a data mais recente

    historical_rolling_dfs = {} # Dicion√°rio para armazenar os DataFrames com acumulado 12m calculado
    valid_hist_indices = [] # Nomes dos √≠ndices com hist√≥rico calculado

    with st.spinner(f"Buscando e calculando hist√≥rico acumulado 12m para {len(selected_historical_indices)} √≠ndice(s)..."):
        for index_name in selected_historical_indices:
            if index_name in INDICES_IDS:
                codigo_sgs_hist = INDICES_IDS[index_name]
                # Busca os dados MENSAIS para o per√≠odo estendido
                historical_df_monthly = get_bcb_data(codigo_sgs=codigo_sgs_hist, start_date=start_date_fetch, end_date=today_hist)

                if historical_df_monthly is not None and not historical_df_monthly.empty:
                    col_name_monthly = f'sgs_{codigo_sgs_hist}'
                    if col_name_monthly not in historical_df_monthly.columns:
                         print(f"Hist√≥rico: Coluna {col_name_monthly} n√£o encontrada para {index_name} ap√≥s busca.")
                         continue # Pula para o pr√≥ximo √≠ndice se a coluna esperada n√£o existir

                    # Renomeia coluna e garante √≠ndice Datetime
                    historical_df_monthly = historical_df_monthly.rename(columns={col_name_monthly: index_name})
                    historical_df_monthly.index = pd.to_datetime(historical_df_monthly.index)

                    window_size = 12 # Janela para acumulado 12 meses
                    rolling_accum_col_name = f"{index_name}_Acum12M" # Nome da nova coluna

                    # Calcula o acumulado 12 meses usando rolling().apply()
                    # raw=False √© importante para passar a s√©rie correta para a fun√ß√£o
                    historical_df_monthly[rolling_accum_col_name] = historical_df_monthly[index_name].rolling(
                        window=window_size,
                        min_periods=window_size # Garante que s√≥ calcula com 12 per√≠odos completos
                    ).apply(calculate_rolling_12m_accumulation, raw=False)

                    # Seleciona apenas a coluna calculada e remove NaNs (gerados no in√≠cio do rolling)
                    df_to_store = historical_df_monthly[[rolling_accum_col_name]].dropna()

                    if not df_to_store.empty:
                        historical_rolling_dfs[index_name] = df_to_store
                        valid_hist_indices.append(index_name)
                    else:
                        print(f"Hist√≥rico: DataFrame acumulado 12m vazio para {index_name} ap√≥s c√°lculo/dropna.")
                else:
                     print(f"Hist√≥rico: Nenhum dado mensal encontrado para {index_name} no per√≠odo de busca.")
            else:
                 st.warning(f"√çndice hist√≥rico '{index_name}' n√£o reconhecido.")

    # Se nenhum hist√≥rico p√¥de ser calculado
    if not valid_hist_indices:
        st.error("N√£o foi poss√≠vel calcular o hist√≥rico acumulado em 12 meses para nenhum dos √≠ndices selecionados.")
        st.stop()

    # Combina os DataFrames de acumulado 12m (um por √≠ndice)
    combined_rolling_df = None
    try:
        if historical_rolling_dfs:
            # Concatena usando as colunas calculadas (e nomes dos √≠ndices)
            combined_rolling_df = pd.concat(historical_rolling_dfs.values(), axis=1)
            # Renomeia as colunas para os nomes dos √≠ndices (sem o sufixo _Acum12M) para o gr√°fico
            rename_map = {f"{name}_Acum12M": name for name in valid_hist_indices}
            combined_rolling_df.rename(columns=rename_map, inplace=True)
            combined_rolling_df = combined_rolling_df.sort_index() # Garante ordem cronol√≥gica
        else:
            st.warning("Nenhum DataFrame hist√≥rico v√°lido para concatenar ap√≥s c√°lculos.")
            st.stop()
    except Exception as e:
        st.error(f"Erro ao combinar dados hist√≥ricos acumulados: {e}")
        st.stop()

    # Se a combina√ß√£o falhar
    if combined_rolling_df is None or combined_rolling_df.empty:
        st.error("Falha ao criar DataFrame combinado hist√≥rico ou resultado vazio.")
        st.stop()

    # Filtra o DataFrame combinado para o per√≠odo de VISUALIZA√á√ÉO selecionado pelo usu√°rio
    end_date_display = today_hist
    # Calcula a data de in√≠cio da visualiza√ß√£o baseada nos meses selecionados
    start_date_display = end_date_display - pd.DateOffset(months=months_in_range)
    # Garante que n√£o tenta exibir antes da data m√≠nima dispon√≠vel no DF combinado
    start_date_display = max(pd.to_datetime(start_date_display), combined_rolling_df.index.min())


    # Filtra o DataFrame para o per√≠odo de exibi√ß√£o
    combined_rolling_df_display = combined_rolling_df[
        (combined_rolling_df.index >= pd.to_datetime(start_date_display)) &
        (combined_rolling_df.index <= pd.to_datetime(end_date_display))
    ].copy() # .copy() para evitar SettingWithCopyWarning

    # Remove linhas que s√≥ contenham NaN no per√≠odo de exibi√ß√£o
    combined_rolling_df_display.dropna(axis=0, how='all', inplace=True)

    # Exibe o gr√°fico e dados se houver algo para mostrar
    if not combined_rolling_df_display.empty:
        actual_start_display = combined_rolling_df_display.index.min().strftime('%m/%Y')
        actual_end_display = combined_rolling_df_display.index.max().strftime('%m/%Y')
        st.markdown(f"**M√©dias do Acum. 12M no Per√≠odo Selecionado ({actual_start_display} a {actual_end_display}):**")

        # Exibe m√©tricas da m√©dia do acumulado 12m no per√≠odo visualizado
        cols_hist_metrics = st.columns(len(valid_hist_indices)) if len(valid_hist_indices) > 0 else [st]
        idx_hist_col = 0
        for index_name in valid_hist_indices: # Itera sobre os √≠ndices que t√™m dados
            if index_name in combined_rolling_df_display.columns:
                # Calcula a m√©dia da coluna (que representa o acum. 12m)
                average_val = combined_rolling_df_display[index_name].mean()
                if pd.notna(average_val):
                    current_col = cols_hist_metrics[idx_hist_col % len(valid_hist_indices)] if len(valid_hist_indices)>0 else st
                    with current_col:
                         help_text = f"M√©dia da infla√ß√£o acumulada em 12 meses de {index_name} entre {actual_start_display} e {actual_end_display}."
                         st.metric(label=f"{index_name}", value=f"{average_val:.2f}%", help=help_text)
                    idx_hist_col += 1

        # Plota o gr√°fico de linhas
        st.line_chart(combined_rolling_df_display)

        # Expander para mostrar os dados do gr√°fico
        with st.expander("Ver dados do gr√°fico (Infla√ß√£o Acumulada 12 Meses %)"):
            st.dataframe(combined_rolling_df_display.style.format("{:.2f}", na_rep="-"))
    else:
        # Mensagem se n√£o houver dados no per√≠odo de visualiza√ß√£o selecionado
        st.info(f"N√£o h√° dados de infla√ß√£o acumulada em 12 meses para os √≠ndices selecionados no per√≠odo ({selected_range_label}) ap√≥s o c√°lculo.")
else:
    # Mensagem se nenhum √≠ndice for selecionado para o hist√≥rico
    st.info("üëÜ Selecione um ou mais √≠ndices acima para visualizar o hist√≥rico comparativo.")


# --- Se√ß√£o de C√°lculo de Reajuste de Aluguel ---
st.divider()
st.header("üí∏ Calculadora de Reajuste de Aluguel")
st.markdown("Simule o reajuste do seu aluguel com base em diferentes √≠ndices (individuais, m√©dia ou m√≠nimo de combina√ß√µes).")

# --- Inputs para o C√°lculo do Aluguel ---
rent_col1, rent_col2 = st.columns(2)
with rent_col1:
    initial_rent = st.number_input(
        "Valor Inicial do Aluguel (R$):",
        min_value=0.01, value=1000.0, step=100.0, format="%.2f",
        key="rent_initial_value"
    )
    # Data de in√≠cio: Pelo menos 1 m√™s atr√°s
    contract_start_date = st.date_input(
        "Data de In√≠cio do Contrato:",
        value=date.today() - timedelta(days=365*2), # Default 2 anos atr√°s
        max_value=date.today() - timedelta(days=31), # M√°ximo 1 m√™s atr√°s
        help="A data que define o m√™s de anivers√°rio do reajuste.",
        key="rent_start_date"
    )
with rent_col2:
    # Op√ß√£o para selecionar o √≠ndice REALMENTE usado no contrato
    rent_index_options = ["Selecione o √≠ndice..."] + list(INDICES_IDS.keys())
    actual_rent_index = st.selectbox(
        "√çndice Aplicado no Contrato Real:",
        options=rent_index_options,
        index=0, # Default "Selecione..."
        help="Qual √≠ndice consta no seu contrato para reajuste anual?",
        key="rent_actual_index"
    )
    # Data final: Pelo menos 1 m√™s depois do in√≠cio
    contract_end_date = st.date_input(
        "Data Final do Contrato (ou data desejada para simula√ß√£o):",
        value=date.today(), # Default hoje
        min_value=contract_start_date + timedelta(days=30),
        max_value=date.today() + timedelta(days=365*10), # Limite futuro
        key="rent_end_date"
    )

# Bot√£o para iniciar o c√°lculo
calculate_button = st.button("Calcular Reajuste e Comparar Cen√°rios", key="rent_calculate_btn")

# --- L√≥gica do C√°lculo (Executa ao clicar no bot√£o e se √≠ndice real foi selecionado) ---
if calculate_button and actual_rent_index != "Selecione o √≠ndice...":

    # 1. Determinar per√≠odo de busca e buscar dados MENSAIS para TODOS os √≠ndices base
    # Busca desde 12 meses ANTES do in√≠cio do contrato para ter dados pro 1¬∫ reajuste
    fetch_start_date = pd.to_datetime(contract_start_date) - pd.DateOffset(months=12)
    fetch_end_date = pd.to_datetime(contract_end_date) # Usa a data final fornecida

    all_base_indices = list(INDICES_IDS.keys()) # Lista de todos os √≠ndices dispon√≠veis
    monthly_data_all_indices = {} # Dicion√°rio para guardar DFs mensais
    failed_indices_fetch = [] # Guarda nomes dos que falharam na busca

    with st.spinner(f"Buscando dados mensais ({fetch_start_date.strftime('%m/%Y')} a {fetch_end_date.strftime('%m/%Y')})..."):
        for index_name in all_base_indices:
            codigo_sgs = INDICES_IDS[index_name]
            # Busca os dados mensais
            df_monthly = get_bcb_data(codigo_sgs=codigo_sgs, start_date=fetch_start_date.date(), end_date=fetch_end_date.date())

            if df_monthly is not None and not df_monthly.empty:
                col_name_sgs = f'sgs_{codigo_sgs}'
                if col_name_sgs in df_monthly.columns:
                    df_monthly = df_monthly.rename(columns={col_name_sgs: index_name})
                    monthly_data_all_indices[index_name] = df_monthly[[index_name]] # Guarda s√≥ a coluna do √≠ndice
                else:
                    failed_indices_fetch.append(index_name) # Falha se coluna n√£o encontrada
            else:
                failed_indices_fetch.append(index_name) # Falha se n√£o retornou dados

    # Verifica se o √≠ndice REAL do contrato foi obtido
    if actual_rent_index not in monthly_data_all_indices:
        st.error(f"Dados hist√≥ricos mensais ausentes para o √≠ndice base do contrato ({actual_rent_index}). N√£o √© poss√≠vel continuar.")
        st.stop()

    # Avisa sobre outros √≠ndices que falharam (para a compara√ß√£o)
    if failed_indices_fetch:
        st.warning(f"N√£o foi poss√≠vel obter dados mensais para comparar com: {', '.join(failed_indices_fetch)}")

    valid_base_indices = list(monthly_data_all_indices.keys()) # √çndices que tiveram dados mensais obtidos

    # 2. PR√â-CALCULAR Acumulado 12 Meses para TODOS os √≠ndices base v√°lidos
    # Isso evita recalcular o rolling para cada cen√°rio de simula√ß√£o
    rolling_12m_all_indices = {} # Dicion√°rio para guardar as s√©ries Acum12m pr√©-calculadas

    with st.spinner("Calculando acumulado 12 meses para √≠ndices base..."):
        for index_name in valid_base_indices:
            df_monthly = monthly_data_all_indices[index_name] # Pega o DF mensal
            rolling_accum_col = f"{index_name}_Acum12M" # Nome da coluna de acumulado

            df_monthly.index = pd.to_datetime(df_monthly.index) # Garante DatetimeIndex
            # Calcula o rolling e guarda na coluna nova
            df_monthly[rolling_accum_col] = df_monthly[index_name].rolling(
                window=12, min_periods=12
            ).apply(calculate_rolling_12m_accumulation, raw=False)

            # Guarda SOMENTE a s√©rie de acumulado 12m (sem NaNs iniciais) no dicion√°rio
            rolling_12m_all_indices[index_name] = df_monthly[[rolling_accum_col]].dropna()

    # 3. Fun√ß√£o para Simular Pagamentos (aceita nomes de √≠ndices base, m√©dia ou m√≠nimo)
    def simulate_rent_payments_v3(start_rent, start_date, end_date, simulation_index_name, precalculated_rolling_data):
        """Simula pagamentos de aluguel m√™s a m√™s, aplicando reajuste anual."""
        payment_history = []
        current_rent = start_rent
        total_paid = 0.0
        # Gera o range de meses do contrato
        date_range = pd.date_range(start=start_date, end=end_date, freq='MS') # MS = Month Start

        base_indices_in_sim = []
        sim_type = "base" # Tipo de simula√ß√£o: 'base', 'media', 'minimo'

        # --- Identifica o tipo de simula√ß√£o e os √≠ndices base envolvidos ---
        if simulation_index_name.startswith("M√©dia (") and simulation_index_name.endswith(")"):
            sim_type = "media"
            # Extrai os nomes dos √≠ndices da string (ex: "M√©dia (IGP-M, IPCA)")
            try: base_indices_in_sim = [idx.strip() for idx in re.findall(r'\((.*?)\)', simulation_index_name)[0].split(',')]
            except IndexError: return None, 0, f"Formato inv√°lido para M√©dia: {simulation_index_name}"
        elif simulation_index_name.startswith("M√≠nimo (") and simulation_index_name.endswith(")"):
            sim_type = "minimo"
            try: base_indices_in_sim = [idx.strip() for idx in re.findall(r'\((.*?)\)', simulation_index_name)[0].split(',')]
            except IndexError: return None, 0, f"Formato inv√°lido para M√≠nimo: {simulation_index_name}"
        elif simulation_index_name in precalculated_rolling_data:
            sim_type = "base"
            base_indices_in_sim = [simulation_index_name]
        else:
            # Se o nome n√£o corresponde a nenhum formato conhecido ou √≠ndice base
            return None, 0, f"√çndice/Cen√°rio '{simulation_index_name}' inv√°lido ou sem dados pr√©-calculados."

        # Verifica se temos os dados pr√©-calculados para TODOS os √≠ndices base necess√°rios
        missing_data = [idx for idx in base_indices_in_sim if idx not in precalculated_rolling_data]
        if missing_data:
            return None, 0, f"Dados acumulados 12m ausentes para simular com: {', '.join(missing_data)}"
        #-------------------------------------------------------------------------

        # Itera sobre cada m√™s do contrato
        for current_month_start in date_range:
            adjustment_perc = pd.NA # Percentual de reajuste aplicado (NA se n√£o for m√™s de reajuste)
            adjusted_value = 0.0 # Valor do reajuste (0 se n√£o houver)

            # Verifica se √© m√™s de anivers√°rio do contrato (e n√£o o primeiro m√™s)
            if current_month_start.month == pd.Timestamp(start_date).month and current_month_start > pd.Timestamp(start_date):

                # A data do √≠ndice para reajuste √© o m√™s ANTERIOR ao m√™s do reajuste
                adjustment_index_date = current_month_start - pd.DateOffset(months=1)
                # Converte para Period('M') para buscar no √≠ndice pr√©-calculado
                adjustment_month_period = adjustment_index_date.to_period('M')

                accum_values_for_month = [] # Guarda os valores acumulados 12m dos √≠ndices base
                indices_found_for_month = True # Flag para verificar se todos foram encontrados

                # Busca o valor acumulado 12m para cada √≠ndice base necess√°rio
                for base_idx in base_indices_in_sim:
                    rolling_col = f"{base_idx}_Acum12M" # Nome da coluna pr√©-calculada
                    try:
                        # Busca o valor no DataFrame pr√©-calculado correspondente ao m√™s/ano
                        val = precalculated_rolling_data[base_idx].loc[precalculated_rolling_data[base_idx].index.to_period('M') == adjustment_month_period, rolling_col].iloc[0]
                        if pd.notna(val):
                            accum_values_for_month.append(val)
                        else:
                            # Se UM valor for NA, n√£o podemos calcular m√©dia/m√≠nimo confiavelmente
                            indices_found_for_month = False; break
                    except IndexError:
                        # M√™s/Ano n√£o encontrado nos dados pr√©-calculados (raro, mas poss√≠vel)
                        print(f"Simula√ß√£o {simulation_index_name}: √çndice {base_idx} n√£o encontrado para {adjustment_month_period}")
                        indices_found_for_month = False; break
                    except Exception as e:
                         print(f"Simula√ß√£o {simulation_index_name}: Erro buscando {base_idx} em {adjustment_month_period}: {e}")
                         indices_found_for_month = False; break

                # Se todos os valores necess√°rios foram encontrados com sucesso
                if indices_found_for_month and accum_values_for_month:
                    # Aplica a l√≥gica baseada no tipo de simula√ß√£o
                    if sim_type == "base":
                        adjustment_perc = accum_values_for_month[0] # Pega o √∫nico valor
                    elif sim_type == "media":
                        adjustment_perc = sum(accum_values_for_month) / len(accum_values_for_month)
                    elif sim_type == "minimo":
                        adjustment_perc = min(accum_values_for_month)

                    # Se o percentual foi calculado (n√£o √© NA)
                    if pd.notna(adjustment_perc):
                        new_rent = current_rent * (1 + adjustment_perc / 100)
                        adjusted_value = new_rent - current_rent # Calcula a diferen√ßa
                        current_rent = new_rent # Atualiza o aluguel para os pr√≥ximos meses
                    else:
                        # Caso onde o c√°lculo da m√©dia/min resultou em NA (pode acontecer?)
                         adjustment_perc = pd.NA # Garante que fica NA
                         print(f"Simula√ß√£o {simulation_index_name}: C√°lculo de ajuste resultou em NA para {current_month_start.strftime('%m/%Y')}")


            # Adiciona o registro do m√™s ao hist√≥rico
            payment_history.append({
                "M√™s/Ano": current_month_start.strftime("%m/%Y"),
                "√çndice M√™s Reajuste (%)": adjustment_perc if pd.notna(adjustment_perc) else None, # S√≥ mostra se houve reajuste
                "Valor Reajuste (R$)": adjusted_value if adjusted_value != 0 else None,
                "Aluguel Pago (R$)": current_rent
            })
            total_paid += current_rent # Acumula o total pago

        # Cria o DataFrame do hist√≥rico
        history_df = pd.DataFrame(payment_history)
        return history_df, total_paid, None # Retorna DF, Total e None (sem erro)


    # 4. Simular o Contrato Real (usando o √≠ndice selecionado pelo usu√°rio)
    st.subheader(f"Simula√ß√£o do Contrato Real (√çndice: {actual_rent_index})")
    actual_history_df, actual_total_paid, error_msg = simulate_rent_payments_v3(
        initial_rent, contract_start_date, contract_end_date, actual_rent_index, rolling_12m_all_indices
    )

    # Se houve erro na simula√ß√£o real, para aqui
    if error_msg:
        st.error(f"Erro cr√≠tico ao simular o contrato real: {error_msg}")
        st.stop()

    # Exibe o hist√≥rico e o total pago do contrato real
    if actual_history_df is not None:
        st.dataframe(
            actual_history_df.style.format({
                "√çndice M√™s Reajuste (%)": "{:.2f}%",
                "Valor Reajuste (R$)": "R$ {:,.2f}",
                "Aluguel Pago (R$)": "R$ {:,.2f}",
            }, na_rep="-").hide(axis="index") # Esconde o √≠ndice do DF
        )
        st.metric(label=f"Total Pago Estimado com {actual_rent_index} (R$)", value=f"{actual_total_paid:,.2f}")
    else:
        st.error("N√£o foi poss√≠vel gerar o hist√≥rico de pagamentos para o contrato real.")
        st.stop() # Para se a simula√ß√£o real falhou por algum motivo inesperado

    # 5. Gerar Op√ß√µes Combinadas e Simular Compara√ß√µes
    st.subheader("Compara√ß√£o com Outros Cen√°rios de Reajuste")
    comparison_results = [] # Lista para guardar os resultados das compara√ß√µes
    indices_to_compare_final = [] # Lista de nomes dos cen√°rios a comparar

    # Adiciona os √≠ndices base (exceto o j√° usado no contrato real)
    indices_to_compare_final.extend([idx for idx in valid_base_indices if idx != actual_rent_index])

    # Gera nomes para cen√°rios de M√©dia e M√≠nimo (combina√ß√µes de 2 e 3 √≠ndices)
    # Limita a 3 para n√£o gerar combina√ß√µes demais
    max_combo_size = min(len(valid_base_indices), 3)
    for r in range(2, max_combo_size + 1):
        for combo in combinations(valid_base_indices, r):
            combo_str = ", ".join(combo)
            # Adiciona os nomes formatados √† lista de cen√°rios
            indices_to_compare_final.append(f"M√©dia ({combo_str})")
            indices_to_compare_final.append(f"M√≠nimo ({combo_str})")

    # Se houver cen√°rios para comparar
    if indices_to_compare_final:
        with st.spinner("Simulando outros cen√°rios de reajuste..."):
            for sim_index_name in indices_to_compare_final:
                # Roda a simula√ß√£o para cada cen√°rio
                sim_history_df, sim_total_paid, error_msg_sim = simulate_rent_payments_v3(
                    initial_rent, contract_start_date, contract_end_date, sim_index_name, rolling_12m_all_indices
                )

                status = "Calculado"
                difference = pd.NA # Diferen√ßa em rela√ß√£o ao contrato real

                if error_msg_sim:
                    status = f"Erro: {error_msg_sim}" # Mostra a mensagem de erro espec√≠fica
                    sim_total_paid = pd.NA # Define total como NA se houve erro
                elif sim_total_paid is not None and pd.notna(sim_total_paid):
                    # Calcula a diferen√ßa apenas se a simula√ß√£o foi bem-sucedida
                    difference = sim_total_paid - actual_total_paid
                else:
                    # Caso de erro inesperado onde n√£o houve mensagem mas total √© None/NA
                    status = "Erro desconhecido na simula√ß√£o"
                    sim_total_paid = pd.NA

                # Adiciona o resultado √† lista
                comparison_results.append({
                    "Cen√°rio Simulado": sim_index_name,
                    "Total Pago Simulado (R$)": sim_total_paid,
                    "Diferen√ßa vs Contrato (R$)": difference,
                    "Status": status
                })

        # Se a lista de resultados n√£o estiver vazia
        if comparison_results:
            # Cria o DataFrame de compara√ß√£o
            comparison_df = pd.DataFrame(comparison_results)
            # Ordena pela diferen√ßa (menor diferen√ßa primeiro), colocando erros no final
            comparison_df = comparison_df.sort_values(by="Diferen√ßa vs Contrato (R$)", ascending=True, na_position='last')

            # Exibe o DataFrame formatado
            st.dataframe(
                comparison_df.style.format({
                    "Total Pago Simulado (R$)": "R$ {:,.2f}",
                    "Diferen√ßa vs Contrato (R$)": "{:+,.2f}" # Sinal de + ou -
                }, na_rep="-")
                .applymap( # Colore a diferen√ßa: vermelho > 0, verde < 0
                    lambda x: 'color: red' if isinstance(x, (int, float)) and x > 0 else ('color: green' if isinstance(x, (int, float)) and x < 0 else ''),
                    subset=['Diferen√ßa vs Contrato (R$)']
                ).hide(axis="index") # Esconde o √≠ndice do DF
            )
        else:
            st.info("N√£o foi poss√≠vel calcular nenhum cen√°rio de compara√ß√£o.")
    else:
        st.info("N√£o h√° outros √≠ndices com dados dispon√≠veis para gerar cen√°rios de compara√ß√£o.")

# --- Fim da Se√ß√£o de C√°lculo de Reajuste de Aluguel ---

# --- Rodap√© na Barra Lateral ---
st.sidebar.markdown("---")
st.sidebar.info("Fonte dos Dados: API de S√©ries Temporais do Banco Central do Brasil (BCB SGS).")
st.sidebar.markdown("Cache de dados da API ativo por **1 hora**.")
# st.sidebar.info("Criado por Riuler") # Descomente se quiser
